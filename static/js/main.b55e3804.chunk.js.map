{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","display","flexWrap","margin","spacing","withoutLabel","marginTop","textField","width","App","useState","movies","setMovies","nominations","setNominations","searchTerm","setSearchTerm","disabled","setDisabled","classes","useEffect","axios","get","trim","then","res","console","log","data","Search","splice","catch","err","className","FormControl","fullWidth","variant","InputLabel","htmlFor","OutlinedInput","id","value","onChange","e","target","startAdornment","InputAdornment","position","labelWidth","map","movie","key","imdbID","Title","Year","indexOf","onClick","nom","handleNominate","length","index","movieID","filter","item","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.b55e3804.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport axios from 'axios'\nimport { makeStyles } from '@material-ui/core/styles';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport OutlinedInput from '@material-ui/core/OutlinedInput';\nimport SearchIcon from '@material-ui/icons/Search';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n      display: 'flex',\n      flexWrap: 'wrap',\n    },\n    margin: {\n      margin: theme.spacing(1),\n    },\n    withoutLabel: {\n      marginTop: theme.spacing(3),\n    },\n    textField: {\n      width: '20ch',\n    },\n}));\n\nfunction App() {\n    const [movies, setMovies] = useState([])\n    const [nominations, setNominations] = useState([])\n    const [searchTerm, setSearchTerm] = useState('');\n    const [disabled, setDisabled] = useState([])\n\n    const classes = useStyles();\n\n    useEffect(() => {\n        axios.get(`https://www.omdbapi.com/?s=${searchTerm.trim()}&apikey=d8a066c3`)\n        .then(res => {\n            console.log(res)\n            setMovies(res.data.Search.splice(0,5))\n        })\n        .catch(err => {\n            console.log(err)\n        })\n    }, [searchTerm])\n\n    useEffect(() => {\n        console.log(\"changes to nominations\")\n    }, [nominations])\n\n    const handleSearchInputChanges = (e) => {\n        setSearchTerm(e.target.value)\n    }\n\n\n    function handleNominate (movie) {\n        console.log(movie)\n        var nom = { id : movie.imdbID, Title: movie.Title, Year: movie.Year }\n\n        setNominations([...nominations, nom])\n        setDisabled(disabled => [...disabled, movie.imdbID]);\n        console.log(disabled)\n        console.log(nominations)\n    }\n\n    function handleRemove (movieID) {\n        setDisabled(disabled => disabled.filter(item => item !== movieID))\n\n        setNominations(nominations => nominations.filter(item => item.id !== movieID))\n        console.log(nominations)\n    }\n    \n    return (\n        <div className=\"App\"> \n            <div className=\"container\">\n                \n                <div className=\"searchbar\">\n                    <h2>The Shoppies</h2>\n                    \n                    <FormControl fullWidth className={classes.margin} variant=\"outlined\">\n                    <InputLabel htmlFor=\"outlined-adornment-amount\">Movie Title</InputLabel>\n                    <OutlinedInput\n                        id=\"outlined-adornment-amount\"\n                        value={searchTerm}\n                        onChange={handleSearchInputChanges}\n                        startAdornment={<InputAdornment position=\"start\"><SearchIcon/></InputAdornment>}\n                        labelWidth={80}\n                    />\n                    </FormControl>\n                </div>\n\n                \n                <div className=\"info\">\n                    <div className=\"results\">\n                        <div className=\"result-block\">\n\n                        {!searchTerm? <b>Your search results will display here.</b> : <b>Results for: \"{searchTerm}\"</b>}\n\n                        {   searchTerm && movies && \n                            movies.map((movie) => (\n                                <div key={movie.imdbID} className=\"movieList\">\n                                    <li>{movie.Title} ({movie.Year})</li>\n                                    <button disabled={disabled.indexOf(movie.imdbID) !== -1} onClick={()=> handleNominate(movie)}>Nominate</button>\n                                </div>\n                            ))\n                        }\n\n                        </div>\n                        \n                        <div className=\"result-block\">\n                            <b>Nominations </b>\n                            {nominations.length? nominations.map((movie, index) => (\n                                \n                                <div key={index} className=\"movieList\">\n                                    <li>{movie.Title} ({movie.Year})</li>\n                                    <button onClick={()=>handleRemove(movie.id)}>Remove</button>\n                                </div>\n                            )) : <text>: You have no nominations yet!</text>}\n                        </div>\n                    </div>\n                    {   nominations.length === 5 && \n                        <div className=\"nomination-complete\">\n                            <h3>You have nominated 5/5 movies!</h3>\n                        </div>\n                    }\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}